package co.milindjagre;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class TempWordCountCode {

	/**
	 * @param args
	 */

	public static List<String> getStopWords() throws IOException {
		List<String> outputList = new ArrayList<String>();
		BufferedReader br = new BufferedReader(new FileReader(
				"S:\\nlp_en_stop_words.txt"));
		String line = null;
		while ((line = br.readLine()) != null) {
			outputList.add(line);
		}
		br.close();
		return outputList;

	}

	public static LinkedHashMap<String, Integer> sortHashMapByValues(
			Map<String, Integer> wordCountMap) {
		List<String> mapKeys = new ArrayList<String>(wordCountMap.keySet());
		List<Integer> mapValues = new ArrayList<Integer>(wordCountMap.values());
		Collections.sort(mapValues, Collections.reverseOrder());
		Collections.sort(mapKeys);

		LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();

		Iterator<Integer> valueIt = mapValues.iterator();
		while (valueIt.hasNext()) {
			Integer val = valueIt.next();
			Iterator<String> keyIt = mapKeys.iterator();

			while (keyIt.hasNext()) {
				String key = keyIt.next();
				Integer comp1 = wordCountMap.get(key);
				Integer comp2 = val;

				if (comp1.equals(comp2)) {
					keyIt.remove();
					sortedMap.put(key, val);
					break;
				}
			}
		}
		return sortedMap;
	}

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(
				"S:\\inputfile.txt"));
		Map<String, Integer> wordCountMap = new HashMap<String, Integer>();
		List<String> stopWordsList = getStopWords();
		String line = null;
		String[] lineSplitter = null;
		int i = 0;
		while ((line = br.readLine()) != null) {
			lineSplitter = line.split(" ");
			for (i = 0; i < lineSplitter.length; i++) {
				if (!(stopWordsList.contains(lineSplitter[i]))) {
					if (wordCountMap.containsKey(lineSplitter[i]))
						wordCountMap.put(lineSplitter[i],
								wordCountMap.get(lineSplitter[i]) + 1);
					else
						wordCountMap.put(lineSplitter[i], 1);
				}
			}
		}
		LinkedHashMap<String, Integer> sortedWordCountMap = sortHashMapByValues(wordCountMap);

		int count = 0;

		for (Entry<String, Integer> entry : sortedWordCountMap.entrySet()) {
			if (count < 10) // printing top 10 words with most frequency
				System.out.println("Key: " + entry.getKey() + " Value: "
						+ entry.getValue());
			count++;
		}
		br.close();
	}
}
